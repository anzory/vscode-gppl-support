import { CompletionItem, CompletionItemKind } from 'vscode';

export const gpplComletionsItemsList: CompletionItem[] = [
  {
    label: 'new block',
    commitCharacters: ['n', 'b'],
    detail: '(snippet)',
    insertText: "{nb,'${0}'}",
    documentation: 'write `new block`',
    kind: CompletionItemKind.Snippet,
  },
  {
    label: 'new line',
    commitCharacters: ['n', 'l'],
    detail: '(snippet)',
    insertText: "{nl, '${0}'}",
    documentation: 'write `new line`',
    kind: CompletionItemKind.Snippet,
  },
  {
    label: 'trace',
    commitCharacters: ['t'],
    detail: '(snippet)',
    insertText: "trace 'all':${1|0,1,5|}",
    documentation:
      "- `trace 'all': 1`: All SolidCAM and user procedures will be traced with minimum trace information available.\n- `trace '@proc':level`: Only procedure @proc will be traced, either it is SolidCAM's or user's one.\n - `level=0`: no trace information.\n - `level=1`: procedure routine name will be printed.\n - `level>1`: trace data in produced",
    kind: CompletionItemKind.Snippet,
  },
  {
    label: 'if endif',
    commitCharacters: ['i'],
    detail: '(snippet)',
    insertText: 'if ${0} then\nendif',
    documentation: '`if endif` statment',
    kind: CompletionItemKind.Snippet,
  },
  {
    label: 'if else endif',
    commitCharacters: ['i'],
    detail: '(snippet)',
    insertText: 'if ${0} then\nelse\nendif',
    documentation: '`if else endif` statment',
    kind: CompletionItemKind.Snippet,
  },
  {
    label: 'while endw',
    commitCharacters: ['w'],
    detail: '(snippet)',
    insertText: 'while ${0}\n\tbreak\nendw ',
    documentation: '`while endw` statment',
    kind: CompletionItemKind.Snippet,
  },
  {
    label: 'new @procedure',
    commitCharacters: ['n', 'p'],
    detail: '(snippet)',
    insertText: '@${0}\nendp',
    documentation: 'define `new procedure`',
    kind: CompletionItemKind.Snippet,
  },
  {
    label: 'end of procedure',
    commitCharacters: ['e'],
    detail: '(keyword)',
    insertText: 'endp',
    documentation: 'keyword for end of procedure',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'true',
    commitCharacters: ['t'],
    detail: '(constant)',
    insertText: 'true',
    documentation: '`true` logical constant',
    kind: CompletionItemKind.Constant,
  },
  {
    label: 'false',
    commitCharacters: ['f'],
    detail: '(constant)',
    insertText: 'false',
    documentation: '`false` logical constant',
    kind: CompletionItemKind.Constant,
  },
  {
    label: 'global',
    commitCharacters: ['g'],
    detail: '(modifier)',
    insertText: 'global ${1|string,logical,integer,numeric|} $0',
    documentation: '`global` scope modifier',
    kind: CompletionItemKind.Field,
  },
  {
    label: 'local',
    commitCharacters: ['l'],
    detail: '(modifier)',
    insertText: 'local ${1|string,logical,integer,numeric|} $0',
    documentation: '`local` scope modifier',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'string',
    commitCharacters: ['s'],
    detail: '(modifier)',
    insertText: 'string ${0}',
    documentation: '`string` variable modifier',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'logical',
    commitCharacters: ['l'],
    detail: '(modifier)',
    insertText: 'logical ${0}',
    documentation: '`logical` variable modifier',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'integer',
    commitCharacters: ['i'],
    detail: '(modifier)',
    insertText: 'integer ${0}',
    documentation: '`integer` variable modifier',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'numeric',
    commitCharacters: ['n'],
    detail: '(modifier)',
    insertText: 'numeric ${0}',
    documentation: '`numeric` variable modifier',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'if',
    commitCharacters: ['i'],
    detail: '(keyword)',
    insertText: 'if',
    documentation: '`if` gppl keyword',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'else',
    commitCharacters: ['e'],
    detail: '(keyword)',
    insertText: 'else',
    documentation: '`else` gppl keyword',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'elseif',
    commitCharacters: ['e'],
    detail: '(keyword)',
    insertText: 'elseif',
    documentation: '`elseif` gppl keyword',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'endif',
    commitCharacters: ['e'],
    detail: '(keyword)',
    insertText: 'endif',
    documentation: '`endif` gppl keyword',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'then',
    commitCharacters: ['t'],
    detail: '(keyword)',
    insertText: 'then',
    documentation: '`then` gppl keyword',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'and',
    commitCharacters: ['a'],
    detail: '(operator)',
    insertText: 'and ${0}',
    documentation: '`and` return `true` if both operands are `true`',
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'or',
    commitCharacters: ['o'],
    detail: '(operator)',
    insertText: 'or ${0}',
    documentation: '`or` return `true` if any of its operands is `true`',
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'not',
    commitCharacters: ['n'],
    detail: '(operator)',
    insertText: 'not ${0}',
    documentation: '`not` return `true` if its argument is `false`',
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'eq',
    commitCharacters: ['e'],
    detail: '(operator)',
    insertText: 'eq ${0}',
    documentation: "`eq (or '==')` return `true` if both operands are equal",
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'ne',
    commitCharacters: ['n'],
    detail: '(operator)',
    insertText: 'ne ${0}',
    documentation: "`ne (or '<>')` return `true` if both operands are different",
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'le',
    commitCharacters: ['l'],
    detail: '(operator)',
    insertText: 'le ${0}',
    documentation: "`le (or '<=')` return `true` if first operand is less than or equal to the second",
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'lt',
    commitCharacters: ['l'],
    detail: '(operator)',
    insertText: 'lt ${0}',
    documentation: "`lt (or '<' )` return `true` if first operand is less than the second",
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'ge',
    commitCharacters: ['g'],
    detail: '(operator)',
    insertText: 'ge ${0}',
    documentation: "`ge (or '>=')` return `true` if first operand is greater than or equal to the second",
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'gt',
    commitCharacters: ['g'],
    detail: '(operator)',
    insertText: 'gt ${0}',
    documentation: "`gt (or '>' )` return `true` if first operand is greater than the second",
    kind: CompletionItemKind.Operator,
  },
  {
    label: 'while',
    commitCharacters: ['w'],
    detail: '(keyword)',
    insertText: 'while',
    documentation: '`while` gppl loop execution statement',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'endw',
    commitCharacters: ['e'],
    detail: '(keyword)',
    insertText: 'endw',
    documentation: '`endw` gppl loop execution statement',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'abort',
    commitCharacters: ['a'],
    detail: '(keyword)',
    insertText: 'abort',
    documentation: '`abort` gppl stop execution statement',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'break',
    commitCharacters: ['b'],
    detail: '(keyword)',
    insertText: 'break',
    documentation: '`break` gppl stop execution statement',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'return',
    commitCharacters: ['r'],
    detail: '(keyword)',
    insertText: 'return',
    documentation: '`return` gppl stop execution statement',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'exit',
    commitCharacters: ['e'],
    detail: '(keyword)',
    insertText: 'exit',
    documentation: '`exit` gppl stop execution statement',
    kind: CompletionItemKind.Keyword,
  },
  {
    label: 'active()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'active($TM_SELECTED_TEXT)',
    documentation: '`active(variable)` returns `true/false (1/0)` if variable is *active*',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'change()',
    commitCharacters: ['c'],
    detail: '(function)',
    insertText: 'change($TM_SELECTED_TEXT)',
    documentation: '`change(variable)` returns `true/false (1/0)` if variable *was change*',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'even()',
    commitCharacters: ['e'],
    detail: '(function)',
    insertText: 'even($TM_SELECTED_TEXT)',
    documentation: '`even(number)` is `true` only if the `number` *is even*',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'odd()',
    commitCharacters: ['o'],
    detail: '(function)',
    insertText: 'odd($TM_SELECTED_TEXT)',
    documentation: '`odd(number)` is true only if the `number` *is odd*',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'date',
    commitCharacters: ['d'],
    detail: '(function)',
    insertText: 'date',
    documentation: '`date` returns the string value of the current date in the format `DD-MM-YYYY`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'dup()',
    commitCharacters: ['d'],
    detail: '(function)',
    insertText: 'dup($TM_SELECTED_TEXT, ${0})',
    documentation:
      '`dup(string, count)` returns a string value, consisting of the string `string` duplicated `count` times',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'instr()',
    commitCharacters: ['i'],
    detail: '(function)',
    insertText: 'instr($TM_SELECTED_TEXT, ${0})',
    documentation:
      '`instr(str, substr, val)` searches for the appearance of the `substr` in `str` from the `val` column and returns its position from the beginning of `str`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'left()',
    commitCharacters: ['l'],
    detail: '(function)',
    insertText: 'left($TM_SELECTED_TEXT, ${0})',
    documentation: '`left(str, num)` returns the sub-string which consists of `num` left characters of `str`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'lower()',
    commitCharacters: ['l'],
    detail: '(function)',
    insertText: 'lower($TM_SELECTED_TEXT)',
    documentation:
      '`lower(string)` returns the same `string`, where all upper case (capital) letters (a-z) are replaced by their lower case equivalent (a-z)',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'replace()',
    commitCharacters: ['r'],
    detail: '(function)',
    insertText: 'replace($TM_SELECTED_TEXT, ${0})',
    documentation:
      '`replace(str, oldstr, newstr , k)` replace the `k` appearance of the `oldstr` in `str` with `newstr` and returns the `str`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'rev()',
    commitCharacters: ['r'],
    detail: '(function)',
    insertText: 'rev($TM_SELECTED_TEXT)',
    documentation: '`rev(string)` returns the same `string` while reversing the order of its characters',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'right()',
    commitCharacters: ['r'],
    detail: '(function)',
    insertText: 'right($TM_SELECTED_TEXT, ${0})',
    documentation: '`right(str, num)` returns the sub-string which consists of the `num` right characters of `str`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'space()',
    commitCharacters: ['s'],
    detail: '(function)',
    insertText: 'space(${0})',
    documentation: '`space(len)` returns a string of blanks (spaces) of length `len`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'strlen()',
    commitCharacters: ['s'],
    detail: '(function)',
    insertText: 'strlen($TM_SELECTED_TEXT)',
    documentation: '`strlen(string)` returns the length of the `string`, i.e. The number of characters in the string',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'substr()',
    commitCharacters: ['s'],
    detail: '(function)',
    insertText: 'substr($TM_SELECTED_TEXT, ${0})',
    documentation:
      '`substr(string, from, len)` returns the sub-string starting in the `string` from position `from`, and with length `len`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'time()',
    commitCharacters: ['t'],
    detail: '(function)',
    insertText: 'time',
    documentation: "`time` returns the string value of the current time in the format 'HH:MM:SS'",
    kind: CompletionItemKind.Function,
  },
  {
    label: 'tonum()',
    commitCharacters: ['t'],
    detail: '(function)',
    insertText: 'tonum($TM_SELECTED_TEXT)',
    documentation:
      '`tonum(string)` converts the number represented in the `string` from string format to a numeric format',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'tostr()',
    commitCharacters: ['t'],
    detail: '(function)',
    insertText: "tostr($TM_SELECTED_TEXT:'${0}')",
    documentation:
      '`tostr(number:format)` converts the `number` into string notation according to the format specification `format`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'trim()',
    commitCharacters: ['t'],
    detail: '(function)',
    insertText: 'trim($TM_SELECTED_TEXT)',
    documentation: '`trim(string)` returns the same string as in the `string`, but removes all its trailing blanks',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'upper()',
    commitCharacters: ['u'],
    detail: '(function)',
    insertText: 'upper($TM_SELECTED_TEXT)',
    documentation:
      '`upper(string)` returns the same `string`, where all the lower case letters (a-z) are replaced by their upper case (capital) equivalent (A-Z)',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'abs()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'abs($TM_SELECTED_TEXT)',
    documentation:
      '`abs(number)` returns the arc cosine of the `number`. The angle returned is in degrees in the range (0, 180)',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'acos()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'acos($TM_SELECTED_TEXT)',
    documentation:
      '`acos(number)` returns the arc cosine of the `number`. The angle returned is in degrees in the range (0, 180)',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'adims()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'adims($TM_SELECTED_TEXT)',
    documentation: '`adims(array)` returns the number of dimensions of the array',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'alen()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'alen($TM_SELECTED_TEXT, ${0})',
    documentation: '`alen(array, dim)` returns the number of elements in the required dimension of the `array`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'ang()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'ang($TM_SELECTED_TEXT, ${0:y})',
    documentation:
      '`ang(x, y)` returns the angle between vector to the point and the positive direction of the `X axis`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'asin()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'asin($TM_SELECTED_TEXT)',
    documentation:
      '`asin(number)` returns the arc sine of the `number`. The angle returned is in degrees in the range (-90, 90)',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'asize()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'asize($TM_SELECTED_TEXT)',
    documentation: '`asize(array)` returns the number of elements in the array',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'atan()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'atan($TM_SELECTED_TEXT)',
    documentation:
      '`atan(number)` returns the arc tangent of the `number`. The angle returned is in degrees in the range (-90, 90)',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'atan2()',
    commitCharacters: ['a'],
    detail: '(function)',
    insertText: 'atan2(${0:y}, ${1:x})',
    documentation: '`atan2(y, x)` returns the angle defined by the point and the positive direction of the `X axis`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'cos()',
    commitCharacters: ['c'],
    detail: '(function)',
    insertText: 'cos($TM_SELECTED_TEXT)',
    documentation: '`cos(angle)` returns the cosine value of the `angle`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'dist()',
    commitCharacters: ['d'],
    detail: '(function)',
    insertText: 'dist(${0:x}, ${1:y})',
    documentation:
      '`dist(x, y)` returns the distance between the point and the origin of the axis system (point (0,0) ). `dist (x, y)` is equivalent to `sqrt(x*x + y*y)`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'exp()',
    commitCharacters: ['e'],
    detail: '(function)',
    insertText: 'exp($TM_SELECTED_TEXT)',
    documentation: '`exp(number)` returns the value of e (the base of natural logarithms) to the power of `number`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'frac()',
    commitCharacters: ['f'],
    detail: '(function)',
    insertText: 'frac($TM_SELECTED_TEXT)',
    documentation: '`frac(number)` returns the fraction part of the `number`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'int()',
    commitCharacters: ['i'],
    detail: '(function)',
    insertText: 'int($TM_SELECTED_TEXT)',
    documentation: '`int(number)` returns the integer part of the `number`. The value is truncated, not rounded',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'log()',
    commitCharacters: ['l'],
    detail: '(function)',
    insertText: 'log($TM_SELECTED_TEXT)',
    documentation: '`log(number)` returns the value of the natural logarithm of the `number`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'log10()',
    commitCharacters: ['l'],
    detail: '(function)',
    insertText: 'log10($TM_SELECTED_TEXT)',
    documentation: '`log10(number)` returns the value of the base 10 logarithm of the `number`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'mod()',
    commitCharacters: ['m'],
    detail: '(function)',
    insertText: 'mod(${0:a}, ${1:b})',
    documentation: '`mod(a, b)` returns the remainder R of a/b',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'norm360()',
    commitCharacters: ['n'],
    detail: '(function)',
    insertText: 'norm360($TM_SELECTED_TEXT)',
    documentation: '`norm360(number)` returns the normalized angle of the parameter in the range (0,360)',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'pow()',
    commitCharacters: ['p'],
    detail: '(function)',
    insertText: 'pow(${0:b}, ${1:p})',
    documentation: '`pow(b, p)` returns the value of `b` to the power of `p`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'round()',
    commitCharacters: ['r'],
    detail: '(function)',
    insertText: 'round($TM_SELECTED_TEXT, ${1})',
    documentation:
      '`round(number, dig)` returns the number rounded to the required number of digits either after or before the decimal point',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'round2val()',
    commitCharacters: ['r'],
    detail: '(function)',
    insertText: 'round2val($TM_SELECTED_TEXT, ${1})',
    documentation: '`round2val(c, d)` returns `c` rounded to smallest multiple of `d`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'sign()',
    commitCharacters: ['s'],
    detail: '(function)',
    insertText: 'sign($TM_SELECTED_TEXT)',
    documentation: '`sign(number)` returns an integer number, representing the `sign` of the `number`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'sin()',
    commitCharacters: ['s'],
    detail: '(function)',
    insertText: 'sin($TM_SELECTED_TEXT)',
    documentation: '`sin(angle)` returns the sine value of the `angle`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'sqrt()',
    commitCharacters: ['s'],
    detail: '(function)',
    insertText: 'sqrt($TM_SELECTED_TEXT)',
    documentation: '`sqrt(number)` returns the square root of the `number` is equivalent to `pow(number, 0.5)`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'square()',
    commitCharacters: ['s'],
    detail: '(function)',
    insertText: 'square($TM_SELECTED_TEXT)',
    documentation: '`square(number)` returns the value of the `number` squared. it is equivalent to `pow(number, 2)`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'tan()',
    commitCharacters: ['t'],
    detail: '(function)',
    insertText: 'tan($TM_SELECTED_TEXT)',
    documentation: '`tan(angle)` returns the tangent value of the `angle`',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'todeg()',
    commitCharacters: ['t'],
    detail: '(function)',
    insertText: 'todeg($TM_SELECTED_TEXT)',
    documentation: '`todeg(angle)` returns the `angle` (given in radians) into its equivalent in degrees',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'torad()',
    commitCharacters: ['t'],
    detail: '(function)',
    insertText: 'torad($TM_SELECTED_TEXT)',
    documentation: '`torad(angle)` returns the `angle` (given in degrees) into its equivalent in radians',
    kind: CompletionItemKind.Function,
  },
  {
    label: 'call',
    commitCharacters: ['c'],
    detail: '(function)',
    insertText: 'call @${0}',
    documentation: 'call gppl @procedures',
    kind: CompletionItemKind.Function,
  },
];
